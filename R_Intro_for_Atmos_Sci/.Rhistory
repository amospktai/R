nc = nc_open(filename)
pr = ncvar_get(nc, 'pr')
nc_close(nc)
plot.field(pr[,,240], lon, lat, Pacific.centric = TRUE)
min(pr, na.rm=TRUE)
max(pr, na.rm=TRUE)
3600*24
3600*24*365
0.1^3
prec = pr*3600*24*365
plot.field(prec[,,240], lon, lat, Pacific.centric = TRUE)
Tbio = (tas - 273.15)*ntas/12
filename = paste0('data/lsmask_cmip3_144.nc')
nc = nc_open(filename)
nc
lsmask = ncvar_get(nc, 'lsmask')
nc_close(nc)
year = 1861:2100
############################################################
### ESSC3600 Module 1
############################################################
library(ncdf4); library(fields); library(maps); library(raster); library(rworldmap); library(abind)
load('~/R/functions.RData')
setwd('~/Dropbox/Education/ESSC3600 Ecosys Clim/2018/')
rcp.vec = c('rcp26', 'rcp45', 'rcp60', 'rcp85')
year = 1861:2100
for (r in 1:length(rcp.vec)) {
rcpxx = rcp.vec[r]
filename = paste0('data/cmip5_tas_Amon_modmean_', rcpxx, '_1_mean_gt273.15_000.nc')
nc = nc_open(filename)
tas = ncvar_get(nc, 'tas')
lon = ncvar_get(nc, 'lon')
lat = ncvar_get(nc, 'lat')
nc_close(nc)
filename = paste0('data/cmip5_tas_Amon_modmean_', rcpxx, '_1_number_gt273.15_000.nc')
nc = nc_open(filename)
ntas = ncvar_get(nc, 'ntas')
nc_close(nc)
# Annual mean biotemperature (deg C):
Tbio = (tas - 273.15)*ntas/12
filename = paste0('data/cmip5_pr_Amon_modmean_', rcpxx, '_1_mean_000.nc')
nc = nc_open(filename)
pr = ncvar_get(nc, 'pr')
nc_close(nc)
# Annual precipitation (mm):
prec = pr*3600*24*365
filename = paste0('data/lsmask_cmip3_144.nc')
nc = nc_open(filename)
lsmask = ncvar_get(nc, 'lsmask')
nc_close(nc)
save(list=c('Tbio', 'prec', 'lsmask', 'lon', 'lat', 'year'), file=paste0('cmip5_met_', rcpxx, '.RData'))
}
length(1861:2100)
diff(lon)
diff(lat)
plot.field(lsmask, lon, lat, Pacific.centric = TRUE)
plot.field(prec[,,240], lon, lat, Pacific.centric = TRUE)
plot.field(prec[,,240]*lsmask, lon, lat, Pacific.centric = TRUE)
# This is for the theology paper on climate injustice. Ozone pollution is not considered in this study.
library(ncdf4); library(fields); library(maps); library(raster); library(rworldmap); library(abind)
load('~/R/functions.RData')
setwd('~/Dropbox/Research/Projects/crop_clim_O3/outputs')
load('crop.FAO.lres.1.9x2.5.1961-2010.RData')
load('crop.SAGE.1.9x2.5.2000.RData')
load('crop.FAO.hres.1.9x2.5.1961-2010.RData')
load('../country_codes.RData')
# Examine what countries are not available as a separate entity in vander Mensbrugghe's projections:
UN_unique = unique(as.vector(UN.code.map))
UN_na = NULL
ISO3_na = NULL
for (n in 1:length(UN_unique)) {
ISO3_unique = as.character(country.codes$ISO3[which(country.codes$UN_CODE == UN_unique[n])])
if (length(ISO3_unique > 1)) ISO3_unique = ISO3_unique[1]
ind = which(country_name == ISO3_unique)
if (length(ind) == 0) {
print(paste(ISO3_unique, ' cannot be found!', sep=''), quote=FALSE)
if (UN_unique[n] != 0) UN_na = c(UN_na, UN_unique[n])
ISO3_na = c(ISO3_na, ISO3_unique)
}
}
ISO3_na
load('../country_codes.RData')
# Derive future crop production and harvest area based on FAO:
# 2050 crop production projections by FAO based on growing demands:
# Alexandratos, N. and J. Bruinsma. 2012. World agriculture towards 2030/2050: the 2012 revision. ESA Working paper No. 12-03. Rome, FAO.
# Also country-specific data from vander Mensbrugghe.
proj_country = read.csv('../vanderMensbrugghe/projections_2006-2050.csv', header=TRUE)
country_name = unique(as.character(proj_country$Country))
for (n in 1:length(country_name)) {
ind = which(country.codes$ISO3 == country_name[n])
if (length(ind) == 0) print(paste(country_name[n], ' is not a country!', sep=''), quote=FALSE)
}
# CAS, E27, OWE, OEE and TWN are not "countries".
# Units: production [1000 ton], harvested area [1000 ha], yield [kg/ha]
# Examine what countries are not available as a separate entity in vander Mensbrugghe's projections:
UN_unique = unique(as.vector(UN.code.map))
UN_na = NULL
ISO3_na = NULL
for (n in 1:length(UN_unique)) {
ISO3_unique = as.character(country.codes$ISO3[which(country.codes$UN_CODE == UN_unique[n])])
if (length(ISO3_unique > 1)) ISO3_unique = ISO3_unique[1]
ind = which(country_name == ISO3_unique)
if (length(ind) == 0) {
print(paste(ISO3_unique, ' cannot be found!', sep=''), quote=FALSE)
if (UN_unique[n] != 0) UN_na = c(UN_na, UN_unique[n])
ISO3_na = c(ISO3_na, ISO3_unique)
}
}
ISO3_na
country.codes
country.codes$SNAME_EN
plot.field(UN.code.map, lon, lat)
?joinCountryData2Map
country.codes$ISO3
length(country.codes$ISO3)
data.frame(country.codes$ISO3, rep(1, length(country.codes$ISO3)))
all.countries = data.frame(country.codes$ISO3, rep(1, length(country.codes$ISO3)))
landmask = CountryData2LonLat(all.countries, lon, lat)
plot.field(landmask, lon, lat)
?rworldmap
countryRegions
countryRegions$REGION
countryRegions$ADMIN
countryRegions$ISO3
country.codes$SNAME_EN
cbind(country.codes$ISO3, country.codes$SNAME_EN)
data.frame(country.codes$ISO3, country.codes$SNAME_EN)
# Examine what countries are not available as a separate entity in vander Mensbrugghe's projections:
UN_unique = unique(as.vector(UN.code.map))
UN_na = NULL
ISO3_na = NULL
for (n in 1:length(UN_unique)) {
ISO3_unique = as.character(country.codes$ISO3[which(country.codes$UN_CODE == UN_unique[n])])
if (length(ISO3_unique > 1)) ISO3_unique = ISO3_unique[1]
ind = which(country_name == ISO3_unique)
if (length(ind) == 0) {
print(paste(ISO3_unique, ' cannot be found!', sep=''), quote=FALSE)
if (UN_unique[n] != 0) UN_na = c(UN_na, UN_unique[n])
ISO3_na = c(ISO3_na, ISO3_unique)
}
}
ISO3_na
countryRegions$SID
head(countryRegions)
# Create a UN code map for extracting country-level data:
out = CountryData2LonLat(country.codes[,c(2,4)], lon, lat)
out[which(is.na(out))] = 0
UN.code.map = out
plot.field(UN.code.map, lon, lat)
plot.field(UN.code.map*(UN.code.map >= 0), lon, lat)
A = UN.code.map
A[which(A == 0)] = NaN
plot.field(A, lon, lat)
plot.field((UN.code.map >= 0), lon, lat)
plot.field((UN.code.map > 0), lon, lat)
countryRegions$ADMIN
countryRegions$ISO3
# Create a land mask in a longitude-latitude grid:
make.land.mask = function(lon, lat) {
# This function creates a land mask for any given longitude-latitude grid specified by "lon" and "lat". All land grid cells will have a value of 1, and all ocean grid cells will have a value of 0.
# This function makes use of another function "CountryData2LonLat" written in "get_geo.R" (see above).
# This function requires installation of two external packages:
library(rworldmap); library(raster)
# All possible country codes:
ISO3.unique = countryRegions$ISO3
in.df = data.frame(ISO3.unique, rep(1, times=length(ISO3.unique)))
land.mask = CountryData2LonLat(in.df, lon, lat, country.code='ISO3')
return(land.mask)
}
A = make.land.mask(lon, lat)
countrySynonyms
countrySynonyms
countrySynonyms$ISO3
countryRegions$ISO3
plot.field(land.mask, lon, lat)
plot.field(A, lon, lat)
A
dim(A)
make.land.mask = function(lon, lat) {
# This function creates a land mask for any given longitude-latitude grid specified by "lon" and "lat". All land grid cells will have a value of 1, and all ocean grid cells will have a value of 0.
# This function makes use of another function "CountryData2LonLat" written in "get_geo.R" (see above).
# This function requires installation of two external packages:
library(rworldmap); library(raster)
# All possible country codes:
ISO3.unique = countryRegions$ISO3
in.df = data.frame(ISO3.unique, rep(1, times=length(ISO3.unique)))
land.mask = CountryData2LonLat(in.df, lon, lat, country.code='ISO3')
land.mask[which(is.na(land.mask))] = 0
return(land.mask)
}
A = make.land.mask(lon, lat)
plot.field(A, lon, lat)
countryRegions$ISO3
install.packages(c("boot", "fields", "foreign", "maps", "MASS", "Matrix", "mgcv", "raster", "Rcpp", "sp", "spam"))
library(ncdf4); library(fields); library(maps); library(raster); library(rworldmap)
A = make.land.mask(lon, lat)
install.packages("sp")
library(ncdf4); library(fields); library(maps); library(raster); library(rworldmap)
vignette('rworldmap')
?joinCountryData2Map
joinCountryData2Map(data.frame(c('SDN', 'SNS'), c(1,2)), 'ISO3', 'country')
in.df = data.frame(c('SDN', 'SNS'), c(1,2), colnames=c('country', 'value'))
in.df
in.df = data.frame(c('SDN', 'SNS'), c(1,2))
colnames(in.df) = c(
'country', 'value)
')
in.df
joinCountryData2Map(in.df, 'ISO3', 'country')
countryRegions$ISO3
countryRegions$ADMIN
countryRegions$ISO3
###############################################################################
# Create a land mask in a longitude-latitude grid:
make.land.mask = function(lon, lat) {
# This function creates a land mask for any given longitude-latitude grid specified by "lon" and "lat". All land grid cells will have a value of 1, and all ocean grid cells will have a value of 0.
# This function makes use of another function "CountryData2LonLat" written in "get_geo.R" (see above).
# This function requires installation of two external packages:
library(rworldmap); library(raster)
# All possible country codes:
ISO3.unique = c(countryRegions$ISO3, 'ESH', 'SSD')
in.df = data.frame(ISO3.unique, rep(1, times=length(ISO3.unique)))
land.mask = CountryData2LonLat(in.df, lon, lat, country.code='ISO3')
land.mask[which(is.na(land.mask))] = 0
return(land.mask)
}
A = make.land.mask(lon, lat)
plot.field(A, lon, lat)
which(country2Region$ISO3 == 'WSB')
which(countryRegions$ISO3 == 'WSB')
countryRegions$ADMIN[which(countryRegions$ISO3 == 'WSB')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'KAB')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'CLP')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'CSI')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'CNM')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'ESB')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'GIB')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'KNM')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'SOL')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'UMI')]
countryRegions$ADMIN[which(countryRegions$ISO3 == 'USG')]
library(ncdf4); library(fields); library(maps); library(raster); library(rworldmap); library(abind)
load('~/R/functions.RData')
setwd('~/Dropbox/Education/ESSC3600 Ecosys Clim/2018/')
############################################################
### ESSC3600 Module 1
############################################################
library(ncdf4); library(fields); library(maps); library(raster); library(rworldmap); library(abind)
load('~/R/functions.RData')
setwd('~/Dropbox/Education/ESSC3600 Ecosys Clim/2018/')
rcp.vec = c('rcp26', 'rcp45', 'rcp60', 'rcp85')
year = 1861:2100
for (r in 1:length(rcp.vec)) {
rcpxx = rcp.vec[r]
filename = paste0('data/cmip5_tas_Amon_modmean_', rcpxx, '_1_mean_gt273.15_000.nc')
nc = nc_open(filename)
tas = ncvar_get(nc, 'tas')
lon = ncvar_get(nc, 'lon')
lat = ncvar_get(nc, 'lat')
nc_close(nc)
filename = paste0('data/cmip5_tas_Amon_modmean_', rcpxx, '_1_number_gt273.15_000.nc')
nc = nc_open(filename)
ntas = ncvar_get(nc, 'ntas')
nc_close(nc)
# Annual mean biotemperature (deg C):
Tbio = (tas - 273.15)*ntas/12
filename = paste0('data/cmip5_pr_Amon_modmean_', rcpxx, '_1_mean_000.nc')
nc = nc_open(filename)
pr = ncvar_get(nc, 'pr')
nc_close(nc)
# Annual precipitation (mm):
prec = pr*3600*24*365
lsmask = make.land.mask(lon, lat)
save(list=c('Tbio', 'prec', 'lsmask', 'lon', 'lat', 'year'), file=paste0('cmip5_met_', rcpxx, '.RData'))
}
plot.field(lsmask, lon, lat)
############################################################
### ESSC3600 Module 1
############################################################
library(ncdf4); library(fields); library(maps); library(raster); library(rworldmap); library(abind)
load('~/R/functions.RData')
setwd('~/Dropbox/Education/ESSC3600 Ecosys Clim/2018/')
rcp.vec = c('rcp26', 'rcp45', 'rcp60', 'rcp85')
year = 1861:2100
for (r in 1:length(rcp.vec)) {
rcpxx = rcp.vec[r]
filename = paste0('data/cmip5_tas_Amon_modmean_', rcpxx, '_1_mean_gt273.15_000.nc')
nc = nc_open(filename)
tas = ncvar_get(nc, 'tas')
lon = ncvar_get(nc, 'lon')
lat = ncvar_get(nc, 'lat')
nc_close(nc)
tas = flip.lon(spdata=tas, lon=lon)$spdata
filename = paste0('data/cmip5_tas_Amon_modmean_', rcpxx, '_1_number_gt273.15_000.nc')
nc = nc_open(filename)
ntas = ncvar_get(nc, 'ntas')
nc_close(nc)
ntas = flip.lon(spdata=ntas, lon=lon)$spdata
# Annual mean biotemperature (deg C):
Tbio = (tas - 273.15)*ntas/12
filename = paste0('data/cmip5_pr_Amon_modmean_', rcpxx, '_1_mean_000.nc')
nc = nc_open(filename)
pr = ncvar_get(nc, 'pr')
nc_close(nc)
pr = flip.lon(spdata=pr, lon=lon)$spdata
# Annual precipitation (mm):
prec = pr*3600*24*365
lon = flip.lon(spdata=pr, lon=lon)$lon
lsmask = make.land.mask(lon, lat)
save(list=c('Tbio', 'prec', 'lsmask', 'lon', 'lat', 'year'), file=paste0('cmip5_met_', rcpxx, '.RData'))
}
plot.field(lsmask, lon, lat)
plot.field(Tbio[,,140], lon, lat)
plot.field(prec[,,140], lon, lat)
plot.field(lsmask, lon, lat)
?mean
?max
getwd()
getwd()
setwd('~/Dropbox/TGABI/R/R_Intro_for_Atmos_Sci/')
a = c(21.5, 22.6, 25.4, 27.5, 20.4, 21.8, 24.0)
a
a	# Displaying a variable
a
pi
exp(1)
b = seq(1, 7)	# Equivalent to: b = 1:7
b
b = 1:7
b
d = seq(0.2, 1.4, by=0.2)
d
10;1
10:1
seq(0.8, 0.2, by=-0.2)
seq(0.8, 0.2, by=0.2)
e = seq(0, 2*pi, length=7)
e
a
b
d
e
A = rbind(a, b, d, e)
A
B = cbind(a, b, d, e)
B
C = matrix(1, nrow=3, ncol=5); C
D = matrix(seq(1, 15), nrow=3, ncol=5); D
E = matrix(seq(1, 15), nrow=3, ncol=5, byrow=TRUE); E
G = array(0, dim=c(4,3,2))
G
dim(G)
D
D[1,2]
E[2,]
E
E[2,]
E[2,1:3]
rev(b)
b
rev(b)
C
D
t(D)
b
which(b == 1)
d
d
which(d == 0.6)
which(d > 0.6)
b
which(b == 1)
which(b < 3)
which(b >= 4)
which(b != 3)
b[which(b == 3)]
b[which(b < 3)]
ls()
log10(100)		# Base-10 logarithm
factorial(4)	# Factorial
7.292e-5
7.292*10^-5
round(3.14)		# Round
ceiling(3.14)	# Round up
floor(3.14)		# Round down
signif(3.14, 2)	# Significant figures
load(file='PM25_T_daily_US_201007.RData')
rm(list=ls())
load(file='PM25_T_daily_US_201007.RData')
ls()
dim(T.US)
head(T.US)
lon.US
lat.US
y
lon.US; lat.US; day
lon.US; lat.US; day
mean(T.US, na.rm=TRUE)
apply(T.US, c(1,2), mean, na.rm=TRUE)
load('~/R/functions.RData')
library(ncdf4); library(fields); library(maps); library(raster); library(rworldmap); library(abind)
load('~/R/functions.RData')
plot.field(apply(T.US, c(1,2), mean, na.rm=TRUE), lon.US, lat.US)
install.packages("abind")
install.packages(c('spam', 'fields', 'maps', 'abind', 'ncdf4'))
install.packages(c("spam", "fields", "maps", "abind", "ncdf4"))
# Plotting maps:
library(fields); library(maps)
# Set working directory:
setwd('/Users/amostai/Dropbox/Public/R_Intro_for_Atmos_Sci/')
setwd('~/Dropbox/TGABI/R/R_Intro_for_Atmos_Sci/')
getwd()
setwd('~/Dropbox/TGABI/R/R_Intro_for_Atmos_Sci/')
# Loading data:
load(file='PM25_T_daily_US_201007.RData')
dim(T.US); head(T.US)
lon.US; lat.US; day
ind = which(day == 20100701)
ind
which(day -- 20100715)
which(day == 20100715)
image.plot(lon.US, lat.US, T.US[,,ind])
map('world', add=TRUE)
map('world')
image.plot(lon.US, lat.US, T.US[,,ind])
map('world', add=TRUE)
source('get_geo.R')
plot.field(T.US[,,ind], lon.US, lat.US, type='def', zlim=c(270, 310))
plot.field(T.US[,,ind], lon.US, lat.US, type='def', zlim=c(270, 310))
for (i in 1:50) {
if (i/2 == floor(i/2)) print(paste0(i, ' stand up!'))
}
PM25.met.data = read.table(file='PM25_met_Ohio_201007.txt', header=TRUE, sep='\t')
head(PM25.met.data)
day = PM25.met.data$day
PM25 = PM25.met.data$PM25
Ta = PM25.met.data$Ta
prec = PM25.met.data$prec
SLP = PM25.met.data$SLP
PM_index = rep(NaN, times=length(PM25))
PM_index
for (t in 1:length(PM25)) {
if (PM25[t] >= 30) PM_index[t] = 'High' else if (PM25[t] >= 10 & PM25[t] < 30) PM_index[t] = 'Med' else PM_index[t] = 'Low'
}
print(cbind(day, PM25, PM_index), quote=FALSE)
PM_index
print(cbind(day, PM25, PM_index), quote=FALSE)
load(file='PM25_T_daily_US_201007.RData')
is.na()
a = c(1, 2, NaN, 4)
a
is.na(a)
HR_model = function(Tbio, prec) {
# Do this and that...
veg = 1
return(veg)
}
HR_model(2, 3)
A = 'Hello'
A
B = 'World'
B
C = paste(A, B, '!', sep=''); C
C = paste0(A, B, '!'); C
C = paste(A, B, '!', sep=' '); C
C = paste0(A, ' ', B, '!'); C
system('ls')
dir()
load("~/Dropbox/Education/ESSC3600 Ecosys Clim/2018/data/cmip5_met_rcp85.RData")
lsmask
dim(lsmask)
plot.field(lsmask, lon, lat)
HR_model = function(Tbio, prec) {
if (Tbio >= 1.5 & Tbio < 3) {
veg = 1
} else if {
veg = 2
}
return(veg)
}
HR_model = function(Tbio, prec) {
if (Tbio >= 1.5 & Tbio < 3) {
veg = 1
} else {
veg = 2
}
return(veg)
}
HR_model = function(Tbio, prec) {
if (Tbio >= 1.5 & Tbio < 3) {
veg = 1
} else {
veg = 2
}
return(veg)
}
HR_model(25, 1000)
HR_model = function(Tbio, prec) {
if (Tbio >= 1.5 & Tbio < 3) {
veg = 1
} else if (Tbio >= 3 & Tbio < 6) {
if (prec < 2000) {
veg = 2
} else {
veg = 3
}
} else {
veg = 4
}
return(veg)
}
HR_model(25, 1000)
